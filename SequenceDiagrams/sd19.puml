@startuml

title SD19. Cập nhật chi tiết khóa học

actor "Instructor" as Actor
boundary "views/\nUpdateCourseDetailPage" as UpdateCourseDetailPage
boundary "views/\nUpdateLessonPage" as UpdateLessonPage
boundary "views/\nCreateDocumentPage" as CreateDocumentPage
boundary "views/\nCreateCommentPage" as CreateCommentPage
boundary "components/\nLesson" as Lesson
boundary "components/\nDocument" as Document
boundary "components/\nComment" as Comment
entity "CourseModel"
control "LessonService"
control "LessonController"
entity "LessonModel"
control "DocumentService"
control "DocumentController"
entity "DocumentModel"
control "CommentService"
control "CommentController"
entity "CommentModel"
database "Database" as Database

activate Actor
Actor -> UpdateCourseDetailPage: 1. redirects to ../updateCourseDetail
deactivate Actor
activate UpdateCourseDetailPage
UpdateCourseDetailPage -> CourseModel: 2. Course.getListLessons()
activate CourseModel
CourseModel -> LessonController: 3. router.get("/course", getCourseLessons)
activate LessonController
LessonController -> LessonModel: 4. calls model
activate LessonModel
LessonModel -> Database: 5. Lesson.find({course})
activate Database
Database --> LessonController: 6. return List<Lesson>
LessonController --> CourseModel: 7. sends res.json
CourseModel --> UpdateCourseDetailPage: 8. return List<Lesson>
deactivate CourseModel
UpdateCourseDetailPage -> Lesson: 9. calls component
activate Lesson
Lesson --> UpdateCourseDetailPage: 10. displays data
deactivate Lesson

opt User creates a lesson
UpdateCourseDetailPage -> UpdateCourseDetailPage: 11. handleCreate()
UpdateCourseDetailPage -> LessonService: 12. createLesson()
activate LessonService
LessonService -> LessonController: 13. router.post("/", createLesson)
LessonController -> LessonModel: 14. calls model
LessonModel -> Database: 15. Lesson.create({})
Database --> LessonController: 16. callback
LessonController --> LessonService: 17. sends res.json
LessonService --> UpdateCourseDetailPage: 18. callback
UpdateCourseDetailPage-> UpdateLessonPage: 19. redirects to ../updateLesson
activate UpdateLessonPage
end

opt User deletes a lesson
UpdateCourseDetailPage -> UpdateCourseDetailPage: 20. handleDelete()
UpdateCourseDetailPage -> LessonService: 21. deleteLesson()
LessonService -> LessonController: 22. router.delete("/", deleteLesson)
LessonController -> LessonModel: 23. calls model
LessonModel -> Database: 24. Lesson.delete({})
Database --> LessonController: 25. callback
LessonController --> LessonService: 26. sends res.json
deactivate LessonController
LessonService --> UpdateCourseDetailPage: 27. displays message
deactivate LessonService
UpdateCourseDetailPage -> UpdateCourseDetailPage: 28. updates display
end

opt User clicks a lesson
UpdateCourseDetailPage -> UpdateLessonPage: 29. redirects to ../updateLesson
deactivate UpdateCourseDetailPage
UpdateLessonPage -> LessonModel: 30. Lesson.getListDocuments()
LessonModel -> DocumentController: 31. router.get("/lesson", getLessonDocuments)
activate DocumentController
DocumentController -> DocumentModel: 32. calls model
activate DocumentModel
DocumentModel -> Database: 33. Document.find({lesson})
Database --> DocumentController: 34. return List<Document>
DocumentController --> LessonModel: 35. sends res.json
LessonModel --> UpdateLessonPage: 36. return List<Document>

UpdateLessonPage -> LessonModel: 37. Lesson.getListComments()
LessonModel -> CommentController: 38. router.get("/lesson", getLessonComments)
activate CommentController
CommentController -> CommentModel: 39. calls model
activate CommentModel
CommentModel -> Database: 40. Comment.find({lesson})
Database --> CommentController: 41. return List<Comment>
CommentController --> LessonModel: 42. sends res.json
LessonModel --> UpdateLessonPage: 43. return List<Comment>
deactivate LessonModel

UpdateLessonPage -> Document: 44. calls component
activate Document
Document --> UpdateLessonPage: 45. displays data
deactivate Document

UpdateLessonPage -> Comment: 46. calls component
activate Comment
Comment --> UpdateLessonPage: 47. displays data
deactivate Comment

opt User creates a document
UpdateLessonPage -> CreateDocumentPage: 48. redirects to ../createDocument
activate CreateDocumentPage
CreateDocumentPage -> CreateDocumentPage: 49. handleCreate()
CreateDocumentPage -> DocumentService: 50. createDocument()
activate DocumentService
DocumentService -> DocumentController: 51. router.post("/", createDocument)
DocumentController -> DocumentModel: 52. calls model
DocumentModel -> Database: 53. Document.create({})
Database --> DocumentController: 54. callback
DocumentController --> DocumentService: 55. sends res.json
DocumentService --> CreateDocumentPage: 56. callback
CreateDocumentPage -> UpdateLessonPage: 57. redirects to ../updateLesson
deactivate CreateDocumentPage
end

opt User deletes a document
UpdateLessonPage -> UpdateLessonPage: 58. handleDelete()
UpdateLessonPage -> DocumentService: 59. deleteDocument()
DocumentService -> DocumentController: 60. router.delete("/", deleteDocument)
DocumentController -> DocumentModel: 61. calls model
DocumentModel -> Database: 62. Document.delete({})
deactivate DocumentModel
Database --> DocumentController: 63. callback
DocumentController --> DocumentService: 64. sends res.json
deactivate DocumentController
DocumentService --> UpdateLessonPage: 65. callback
deactivate DocumentService
UpdateLessonPage -> UpdateLessonPage: 66. updates display
end

opt User accesses comment section
UpdateLessonPage -> CreateCommentPage: 67. redirects to ../createComment
activate CreateCommentPage
alt User adds a comment
CreateCommentPage -> CreateCommentPage: 68. handleCreate()
CreateCommentPage -> CommentService: 69. createComment()
activate CommentService
else User replies a comment
CreateCommentPage -> CreateCommentPage: 70. handleCreate(parentId)
CreateCommentPage -> CommentService: 71. createComment(parentId)
end
CommentService -> CommentController: 72. router.post("/", createComment)
CommentController -> CommentModel: 73. calls model
CommentModel -> Database: 74. Comment.create({})
deactivate CommentModel
Database --> CommentController: 75. callback
deactivate Database
CommentController --> CommentService: 76. sends res.json
deactivate CommentController
CommentService --> CreateCommentPage: 77. callback
deactivate CommentService
CreateCommentPage -> UpdateLessonPage: 78. redirects to ../updateLesson
deactivate UpdateLessonPage
deactivate CreateCommentPage
end
end

@enduml